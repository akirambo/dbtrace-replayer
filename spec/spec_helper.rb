# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = false

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 0

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :global

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  # Coverage
  config.run_all_when_everything_filtered = true
  config.filter_run :focus
  config.order = 'random'

end

########################
# Coverage (Unit Test) #
########################
require "simplecov"

SimpleCov.start do
  add_filter "/vender/"
  add_filter "/lib/redis/spec/"
  add_filter "/lib/memcached/spec/"
  add_filter "/lib/mongodb/spec/"
  add_filter "/lib/cassandra/spec/"
  add_filter "/lib/common/spec/"
  add_filter "/lib/common/abstractDBLog.rb"
  add_filter "/lib/common/abstractDBParser.rb"
  ["common","redis","memcached","mongodb","cassandra"].each{|lib|
    add_group "#{lib}", "/lib/#{lib}/"
  }
end


############
# Original #
############

require "logger"
require "systemu"

COMMAND = "bundle exec ruby ./bin/parser.rb "

def replayMultiTracesOnDB(config)
  config[:testSet].each_index{|index|
    traceType = config[:testSet][index]
    trace     = config[:traceSet][index]
    context "> Trace : #{traceType} " do
      logfile = "#{traceType}2#{config[:runDB]}.log"
      `rm -f #{logfile}`
      command = "#{COMMAND} "
      command += " #{traceType} -m run -T #{config[:runDB]} -d #{config[:datamodel]}" 
      command += " -f #{logfile} #{trace} --schema #{config[:schema]} "
      status, stdout, stderr = systemu(command)
      puts command
      ## Check Normal Execution
      it " > Normal Termination." do
        expect(status.to_s.split(" ")[3]).to eq "0"
        expect(stderr).to eq ""
      end
      ## Check Query Count
      ### Extract Count
      results = {}
      File.open(logfile,"r"){|f|
        flag = false
        while line = f.gets
          if(flag)then
            if(line.include?("- Metrics Detail --"))then
              flag = false
            else
              __data__ = line.split("INFO -- : ")[1]
              data = __data__.split(" ")
              results[data[0].gsub(/\s/,"")] = data[1].gsub(/\s/,"").to_i
            end
          elsif(line.include?("-- GENERATED QUERY --"))then
            flag = true
          end
        end
      }
      ## Clear output File
      if(config[:clean])then
        `rm -f #{logfile}`
      end
      ## Check
      config[:expected].each{|operation,count|
        it "> '#{operation}' operation ran  #{count} Time/Times" do
          expect(results[operation]).to eq count
        end
      }
    end
  }
end



def buildTestSet(testNamePrefix,workloads,options,inputDir,expectedDir)
  testSet = Hash.new
  if(options.size > 0)then
    options.each{|option|
      workloads.each{|workload|
        name = "#{testNamePrefix} [#{workload}] #{option}"
        testSet[name] = Hash.new
        option2filename = option.gsub(/\s/,"")
        testSet[name]["input"]  = "#{inputDir}#{workload}.log"
        testSet[name]["option"] = "#{option}"
        testSet[name]["status"] = 0
        testSet[name]["stderr"] = "#{expectedDir}#{workload}_#{option2filename}.error"
        testSet[name]["stdout"] = "#{expectedDir}#{workload}_#{option2filename}.expected"
        testSet[name]["debug"] = false
        if(option.include?("-l DEBUG"))then
          testSet[name]["debug"] =  "#{expectedDir}#{workload}_#{option2filename}.expected"
          testSet[name]["stdout"] = nil
        end
      }
    }
  else
    workloads.each{|workload|
      name = "#{testNamePrefix} [#{workload}]"
      testSet[name] = Hash.new
      testSet[name]["input"]  = "#{inputDir}#{workload}.log"
      testSet[name]["option"] = ""
      testSet[name]["status"] = 0
      testSet[name]["stderr"] = "#{expectedDir}#{workload}.error"
      testSet[name]["stdout"] = "#{expectedDir}#{workload}.expected"
    }
  end
  return testSet
end
def exec(dbname,config,runmode,random=false)
  command = "#{COMMAND} #{dbname} -m #{runmode}"
  if(config)then
    command += " #{config["option"]} #{config["input"]}"
  end
  puts "[INFO]:: COMMAND is '#{command}'"
  status, stdout, stderr = systemu(command)
  expect(status.exitstatus).to eq config["status"]
  
  ## Check STDERR
  if(FileTest.exist?(config["stderr"]))then
    File.open(config["stderr"]) do |f|
      expect(stderr).to eq f.read
    end
  else
    expect(stderr).to eq ""
  end
  
  ## Check STDOUT
  if(config["stdout"] != nil and FileTest.exist?(config["stdout"]))then
    File.open(config["stdout"]) do |f|
      expect(stdout).to eq f.read
    end
  elsif(config["debug"] and FileTest.exist?(config["debug"]))then
    File.open(config["debug"]) do |f|
      expect(filterLog(stdout,random)).to eq filterLog(f.read,random)
    end
  else
    puts "[WARNING]:: Cannot Find expected File"
    expect(true).to eq false
  end
end

def filterLog(log,random)
  result = log.gsub(/.+\s--\s:/,"")
  if(random)then
    result = result.gsub(/\d+/,"N")
  end
  return result
end

def monitor(a,b)
  ## SKIP
end
class DummyLogger
  def initialize
  end
  def info(message)
  end
  def debug(message)
  end
  def warn(message)
  end
  def error(message)
  end
  def fatal(message)
  end
end

